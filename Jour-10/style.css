*{
    box-sizing: border-box;
}
p{
    font-family: 'Courier New', Courier, monospace;
}
.flex-container{
    display: flex;
    background-color: rgb(85, 7, 254);
    width: 220px;
    height: 110px;
    border: 1px solid black;
    padding: 3px;
}
.flex-item{
    background-color: rgb(254, 126, 7);
    width: 50px;
    height: 50px;
    border: 1px solid rgb(0, 0, 0);
    border-radius: 10px;
    text-align: center;
}
.flex-direction_row-reverse{
    flex-direction: row-reverse;
}
.flex-direction_column{
    flex-direction: column;
}
.flex-direction_column-reverse{
    flex-direction: column-reverse;
}

.flex-wrap_wrap{
    flex-wrap: wrap;
}
.flex-wrap_wrap-reverse{
    flex-wrap: wrap-reverse;
}
/* flex-flow
This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes. The default value is row nowrap. */

.justify-content_flex-start{
    justify-content: flex-start;
}
.justify-content_flex-end{
    justify-content: flex-end;
}
.justify-content_center{
    justify-content: center;
}
.justify-content_space-between{
    justify-content: space-between;
}
.justify-content_space-around{
    justify-content: space-around;
}
.justify-content_space-evenly{
    justify-content: space-evenly;
}
.align-items_flex-start{
    align-items: flex-start;
}
.align-items_flex-end{
    align-items: flex-end;
}
.align-items_center{
    align-items: center;
}
.align-items_stretch{
    align-items: stretch;
}
.align-items_baseline{
    align-items: baseline;
}
.align-items_baseline div{
    padding-top: 15px;
}
.align-content{
    height: 200px;
    flex-wrap: wrap;
}
.align-content_flex-start{
    align-content: flex-start;

}
.align-content_flex-end{
    align-content: flex-end;
}
.align-content_center{
    align-content: center;
}
.align-content_stretch{
    align-content: stretch;
}
.align-content_space-between{
    align-content: space-between;
}
.align-content_space-around{
    align-content: space-around;
}
/* gap, row-gap, column-gap
The gap property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges.
gap: 10px;
gap: 10px 20px; //row-gap column gap 
row-gap: 10px;
column-gap: 20px;
*/
/* 
Properties for the Children
(flex items)
*/
/* order */
.order{
    flex-wrap: wrap;
}
.order-1{
    order: 1;
}
.order-2{
    order: 2;
}
.order-3{
    order: 3;
}
.order-4{
    order: 4;
}
.order-5{
    order: 5;
}
.order-6{
    order: 6;
}
.order-7{
    order: 7;
}
.order-8{
    order: 8;
}
/* flex-grow */
.flex-grow, .flex-shrink{
    width: 350px;
}
.flex-grow .flex-item, .flex-shrink .flex-item, .flex-basis .flex-item{
    margin: 5px 10px;
}
.flex-grow-1{
    flex-grow: 1; /* default 0 */
} 
.flex-grow-2{
    flex-grow: 2;
}
.flex-grow-3{
    flex-grow: 3;
}
/* flex-shrink */
.flex-shrink-3{
    flex-shrink: 3; /* default 1 */
}
.flex-shrink-4{
    flex-shrink: 10; 
}
/* flex-basis */
.flex-basis{
    width: 500px;
}
.flex-basis-1{
    flex-basis: 40%; /* default auto */
}
.flex-basis-2{
    flex-basis: 20%; 
}
.flex-basis-3{
    flex-basis: 30%; 
}
/* 

.item {
    flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
}

flex
This is the shorthand for flex-grow, flex-shrink and flex-basis combined. 
The second and third parameters (flex-shrink and flex-basis) are optional. 
The default is 0 1 auto, but if you set it with a single number value, like flex: 5;, 
that changes the flex-basis to 0%, so it’s like setting flex-grow: 5; flex-shrink: 1; flex-basis: 0%;.

*/

  