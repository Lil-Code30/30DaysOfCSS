table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}
th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}
th {
    background-color: #f4f4f4;
}
tr:hover {
    background-color: #f9f9f9;
}
/* attribute selectors  */

/* Selects elements with the given attribute. */
div[data-color] {
    color: rgb(0, 255, 68);
} 
/* Selects elements with the given attribute and value. */
div[data-color="red"]{
    color: red;
}
/* Selects elements with the given attribute and value where the given attribute contains the given value anywhere (as
a substring). */
[class*="foo"] {
    color: red;
}
/* Selects elements with a given attribute and value where the attribute's value can be represented as Value, VALUE,
vAlUe or any other case-insensitive possibility. */
[lang="EN" i] {
    color: red;
}

/* combinators */
/* Descendant Combinator: selector selector */
/* A descendant combinator, represented by at least one space character (), selects elements that are a descendant of
the defined element. This combinator selects all descendants of the element (from child elements on down). */
div p {
    color:rgb(51, 0, 255);
}

/* Child Combinator: selector > selector */
/* The child (>) combinator is used to select elements that are children, or direct descendants, of the specified
element. */
div > p {
    color:red;
}

/* Adjacent Sibling Combinator: selector + selector */
/* The adjacent sibling (+) combinator selects a sibling element that immediate follows a specified element. */
p + p {
    color:red;
}

/* General Sibling Combinator: selector ~ selector */
/* The general sibling (~) combinator selects all siblings that follow the specified element. */
p ~ p {
    color:red;
}

/* Pseudo-classes */

/* Child pseudo class  */
/* "The :nth-child(an+b) CSS pseudo-class matches an element that has an+b-1 siblings before it in the
document tree, for a given positive or zero value for n" - MDN :nth-child  */

/* Exemple 1 : :nth-child(2n)
Expression : 2n
Signification : Sélectionne les éléments en position paire (2, 4, 6, 8...).
Interprétation : n = 0 → 2*0 = 0 (non valide) ; n = 1 → 2*1 = 2 ; n = 2 → 2*2 = 4... */
li:nth-child(2n) {
    color: red; /* Affecte les éléments en position paire */
}

/* Exemple 2 : :nth-child(2n+1)
Expression : 2n+1
Signification : Sélectionne les éléments en position impaire (1, 3, 5, 7...).
Interprétation : n = 0 → 2*0+1 = 1 ; n = 1 → 2*1+1 = 3 ; n = 2 → 2*2+1 = 5... */
li:nth-child(2n+1) {
    color: blue; /* Affecte les éléments en position impaire */
}

/* Exemple 3 : :nth-child(3n+2)
Expression : 3n+2
Signification : Sélectionne tous les 3 éléments, en commençant par le 2ème (2, 5, 8...).
Interprétation : n = 0 → 3*0+2 = 2 ; n = 1 → 3*1+2 = 5 ; n = 2 → 3*2+2 = 8.. */
li:nth-child(3n+2) {
    color: green; /* Affecte les éléments 2, 5, 8... */
}

/* Cas spécifiques
n=0 dans an+b : Si n=0, l'expression devient simplement b. Cela signifie que seul l'élément à la position b sera sélectionné.

Exemple : :nth-child(3) sélectionne uniquement le 3ème élément.

Expressions négatives :
Si a ou b est négatif, la séquence peut aussi être inversée.

Exemple : :nth-child(-n+3) sélectionne les 3 premiers éléments (1, 2, 3). */

/* :nth-child(odd)
Signification : Sélectionne les éléments en position impaire dans une liste de frères et sœurs.
Positions ciblées : 1, 3, 5, 7, .. */

/* :nth-child(even)
Signification : Sélectionne les éléments en position paire dans une liste de frères et sœurs.
Positions ciblées : 2, 4, 6, 8, ... */

/* :last-child
Signification : Sélectionne le dernier frère ou sœur d’un parent. */

/* :nth-last-child(3)
Signification : Sélectionne l’élément qui est en 3ᵉ position depuis la fin parmi les frères et sœurs d’un parent. */

li:first-child {
    font-family: 'Courier New', Courier, monospace;
}
li:nth-child(odd) {
    text-decoration: wavy underline;
}
li:nth-child(even) {
    text-decoration: double underline black;
}
li:last-child {
    font-weight: bold;
}
li:nth-last-child(3) {
    text-decoration: dashed underline;
}

/* Class Name Selectors  */
.important {
    color: orange;
    font: 1.5em sans-serif;
}
.warning {
    background-color: blue;
    padding: 3px;
    margin: 2px;
}
.warning.important {
    background-color: black ;
}

/* Select element using its ID without the high specificity of the ID selector */
/* 
#element { ... }  High specificity will override many selectors 
[id="element"] { ... } Low specificity, can be overridden easily
*/

/* The :last-of-type selector */
/* The :last-of-type selects the element that is the last child, of a particular type, of its parent */

p:last-of-type {
    background: #C5CAE9;
}
h2:last-of-type {
    background: #CDDC39;
}

/* A. The :not pseudo-class example & B. :focuswithin
CSS pseudo-class */
/* input:not([disabled]):not(.example) */
input:not([disabled], .example){
    background-color: #ccc;
}

#focused-input{
    height: 80px;
}
input[type="text"]{
    margin:30px;
}
#focused-input:focus-within {
    background-color: #1565C0;
}

/* The :only-child pseudo-class selector example */
/* The :only-child CSS pseudo-class represents any element which is the only child of its parent. */
.only-child:only-child {
    text-decoration: wavy underline red;
}